package com.grimeet.grimeet.common.config.oauth.handler;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.grimeet.grimeet.common.config.oauth.UserPrincipalDetails;
import com.grimeet.grimeet.common.exception.GrimeetException;
import com.grimeet.grimeet.common.util.jwt.JwtUtil;
import com.grimeet.grimeet.domain.auth.entity.RefreshToken;
import com.grimeet.grimeet.domain.auth.repository.RefreshTokenRepository;
import com.grimeet.grimeet.domain.user.dto.UserResponseDto;
import com.grimeet.grimeet.domain.user.entity.User;
import com.grimeet.grimeet.domain.user.service.UserFacade;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.List;
import java.util.Map;

@Slf4j
@Component
@RequiredArgsConstructor
public class OAuth2AuthenticationSuccessHandler implements AuthenticationSuccessHandler {

  private final JwtUtil jwtUtil;
  private final UserFacade userFacade;
  private final RefreshTokenRepository refreshTokenRepository;
  private final ObjectMapper objectMapper;

  private final String AUTH_HEADER = "Authorization";
  private final String TOKEN_PREFIX = "Bearer ";

  @Override
  public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {
    log.info("‚úÖ [OAuth2 Authentication Success Handler] Authentication successful: {}", authentication);

    // 1. OAuth2UserÏóêÏÑú attribute Ï†ïÎ≥¥ Ï∂îÏ∂ú
    OAuth2User oAuth2User = (OAuth2User) authentication.getPrincipal();
    Map<String, Object> attributes = oAuth2User.getAttributes();

    // 2. AttributeÏóêÏÑú email Ï†ïÎ≥¥ Ï∂îÏ∂ú
    String email = (String) attributes.get("email");

    UserResponseDto findUserDto;
    try {
      findUserDto = userFacade.findUserByEmail(email);
    } catch (GrimeetException e) {
      // Í∏∞Ï°¥ ÌöåÏõêÏù¥ ÏïÑÎãå Í≤ΩÏö∞ ÌöåÏõêÍ∞ÄÏûÖ Ï≤òÎ¶¨
      log.info("üü† [OAuth2 Authentication Success Handler] User not found. Need signup");

      response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
      response.setContentType("application/json;charset=UTF-8");

      Map<String, String> errorResponse = Map.of(
              "error", "signup_required",
              "message", "ÌöåÏõêÍ∞ÄÏûÖÏù¥ ÌïÑÏöîÌï©ÎãàÎã§."
      );

      response.getWriter().write(objectMapper.writeValueAsString(errorResponse));
      return;
    }

    // 3. ‚úÖ Í∏∞Ï°¥ ÌöåÏõêÏù∏ Í≤ΩÏö∞ JWT ÌÜ†ÌÅ∞ ÏÉùÏÑ±
    User findUser = findUserDto.toEntity();
    UserPrincipalDetails userPrincipal = new UserPrincipalDetails(
            findUser,
            List.of(() -> "ROLE_USER")
    );

    String accessToken = jwtUtil.generateAccessToken(userPrincipal);
    String refreshToken = jwtUtil.generateRefreshToken(userPrincipal);

    // 4. RefreshToken Ï†ÄÏû•
    try {
      refreshTokenRepository.findByEmail(findUser.getEmail())
              .ifPresentOrElse(
                      existingToken -> {
                        existingToken.updateToken(refreshToken);
                        refreshTokenRepository.save(existingToken);
                      },
                      () -> {
                        refreshTokenRepository.save(new RefreshToken(findUser.getEmail(), refreshToken));
                      }
              );
    } catch (DataIntegrityViolationException e) {
      log.warn("‚ö†Ô∏è [OAuth2 Success Handler] RefreshToken Ï†ÄÏû• Ï§ë Ï§ëÎ≥µ Î∞úÏÉù. Í∏∞Ï°¥ ÌÜ†ÌÅ∞ÏùÑ Í∞±Ïã† ÏãúÎèÑÌï©ÎãàÎã§.", e);

      // Ïù¥ÎØ∏ Îã§Î•∏ Ïä§Î†àÎìúÍ∞Ä Ï†ÄÏû•ÌñàÏùÑ Í∞ÄÎä•ÏÑ± ÏûàÏùå ‚Üí Í∑∏ÎÉ• update ÏãúÎèÑ
      refreshTokenRepository.findByEmail(findUser.getEmail())
              .ifPresent(existingToken -> {
                existingToken.updateToken(refreshToken);
                refreshTokenRepository.save(existingToken);
              });
    }

    // 5. Response HeaderÏóê AccessToken Ï∂îÍ∞Ä
    response.setHeader(AUTH_HEADER, TOKEN_PREFIX + accessToken);

    // 6. ResponseBodyÏóê RefreshToken Ï∂îÍ∞Ä
    Map<String, String> tokenResponse = Map.of(
            "refreshToken", refreshToken
    );

    response.setStatus(HttpServletResponse.SC_OK);
    response.setContentType("application/json;charset=UTF-8");
    response.getWriter().write(objectMapper.writeValueAsString(tokenResponse));
  }
}
